<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>aurka.com</title><link href="http://aurka.com/" rel="alternate"></link><link href="http://aurka.com/feeds/all-de.atom.xml" rel="self"></link><id>http://aurka.com/</id><updated>2013-11-25T00:00:00+01:00</updated><entry><title>Piwik</title><link href="http://aurka.com/piwik.html" rel="alternate"></link><updated>2013-11-25T00:00:00+01:00</updated><author><name>janssen</name></author><id>tag:aurka.com,2013-11-25:piwik.html</id><summary type="html">&lt;p&gt;&lt;img alt="Piwik-Post Header" src="http://aurka.com/pictures/piwik_theater.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Wer sich dafür interessiert, was für Scripts sein Browser lokal ausführt, der dürfte schnell bemerkt haben, dass sich piwik.aurka.com via &lt;a href="https://en.wikipedia.org/wiki/NoScript" title="Wikipedia zu NoScript"&gt;NoScript&lt;/a&gt; oder ähnlichem gemeldet hat. Kurze Info hierzu:&lt;/p&gt;
&lt;h2&gt;Ja, eine Piwik-Instanz bastelt mir Statistiken&lt;/h2&gt;
&lt;p&gt;Ich bin jemand, der solche Scripts schon gar nie zulässt und ich werde dies auch in Zukunft nicht ändern - wieso erstelle ich dennoch für *.aurka.com eine Piwik-Instanz? &lt;/p&gt;
&lt;p&gt;Der Grund ist ziemlich einfach: Ich bin neugierig, mine gerne Daten und möchte speziell bei den Fotos auf &lt;a href="http://mediagoblin.aurka.com" title="mediagoblin.aurka.com"&gt;Mediagoblin&lt;/a&gt; gerne wissen, wie oft ein Foto angeschaut wurde. Dieses Feature fehlt mir leider - ich hab mich daran gewöhnt, bei flickr (ganz früher) respektive bei 500px (früher) jeweils zu schauen, wie oft meine Bilder angeklickt wurden. Wieso weiss ich auch nicht wirklich. Nun habe ich mir dieses Feature (wenn auch ein bisschen umständlich) nachimplementiert.&lt;/p&gt;
&lt;p&gt;Einige Gedanken zum Datenschutz:
&lt;em&gt; Von den IPs werden nur die ersten 16 Bits gespeichert (also 192.168.XXX.XXX).
&lt;/em&gt; Ich habe Zugriff auf die Seite - niemand sonst. 
&lt;em&gt; Der Do-Not-Track-Header (wenn ich ihn auch nicht wirklich als sinnvoll erachte) wird respektiert.
&lt;/em&gt; Die Instanz läuft ebenfalls auf dem Uberspace, übermittelt also keine Daten an was für einen zusätzlichen Server auch immer.
* Wer nicht getrackt werden möchte soll doch bitte mit einem modernen Browser ins Internet gehen und sich NoScript oder ähnliches zutun. &lt;/p&gt;
&lt;p&gt;Es ist wohl so ziemlich das gleiche wie bei den Mails: Wenn ihr nicht wollt, dass ihr getrackt werdet, eure Mails gelesen werden, etc.:&lt;/p&gt;
&lt;p&gt;Verwendet GPG/PGP, HTTPS(everywhere), NoScript, AdBlockEdge, Tor oder zumindest VPN-Dienste, OTR für Jabber (und nicht ICQ oder $schiess-mich-tot-messanger-protokoll chatten)!&lt;/p&gt;</summary><category term="piwik"></category><category term="tech"></category><category term="blog"></category><category term="tracking"></category><category term="privacy"></category><category term="datenschutz"></category></entry><entry><title>Bankomaten</title><link href="http://aurka.com/bankomaten.html" rel="alternate"></link><updated>2013-11-20T00:00:00+01:00</updated><author><name>janssen</name></author><id>tag:aurka.com,2013-11-20:bankomaten.html</id><summary type="html">&lt;p&gt;&lt;img alt="woot" src="pictures/bankomat_header.jpg" /&gt;&lt;/p&gt;
&lt;h1&gt;Oder auch: Welcher ***** ist für diese ******* Software verantwortlich?&lt;/h1&gt;
&lt;p&gt;Ich weiss ja auch nicht, aber manche Firmen überlegen sich bezüglich Bankomaten-Software ja wohl rein überhauptnichts.&lt;/p&gt;
&lt;p&gt;Besonders lustig in der Schweiz: Bankomaten der Credit Suisse (wohl auch andere, aber dort bestimmt). Diese sind nämlich sowas von schlau, dass sie nach der Pineingabe wie gewohnt die Touchscreen (und Tasten) Felder haben - alles also wie gewohnt.&lt;/p&gt;
&lt;p&gt;Es gibt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;50 Franken&lt;/li&gt;
&lt;li&gt;100 Franken&lt;/li&gt;
&lt;li&gt;200 Franken&lt;/li&gt;
&lt;li&gt;400 Franken&lt;/li&gt;
&lt;li&gt;Anderer Geldbetrag&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Letzteres ist ja schonmal fragwürdig. Normalerweise ist &lt;code&gt;anderer Geldbetrag&lt;/code&gt; ja einfach das Ziffernfeld und dann auf &lt;code&gt;OK&lt;/code&gt; hauen. Aber nein: Die Credit Suisse macht es viiieeel besser und kombiniert den Ziffernblock mit den Eingaben von oben. Wenn ich nun also auf eine Ziffer drücke, dann ist dies &lt;em&gt;gleichbedeutend&lt;/em&gt; mit einem Feld auf dem Touchscreen oder einer der Knöpfe bei den Feldern gleich neben dem Touchscreen.&lt;/p&gt;
&lt;p&gt;Also einmal schnell 60 Franken rauslassen wollen, auf die &lt;code&gt;6&lt;/code&gt; gedrückt, Bankomat macht &lt;em&gt;Piiiip&lt;/em&gt; und fragt: &lt;code&gt;Wollen Sie einen Beleg?&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Was noch toller ist: Der Vorgang kann nicht mehr abgebrochen werden. Da kann man noch so hektisch auf den &lt;code&gt;Abbrechen&lt;/code&gt;-Knopf hämmern. Das Geld kommt raus - und wenn man gaaanz viel Glück hat, dann darf man die 100 Franken Noten zählen, weil die Zahl &lt;code&gt;6&lt;/code&gt; vom Ziffernblock gerade $n-100 Franken hies. Toll, danke vielmals!&lt;/p&gt;
&lt;p&gt;Um es einfach so in die Runde zu werfen:&lt;/p&gt;
&lt;p&gt;Auch ganz toll sind Bankomaten, welche auf Toucheingaben mehrere Sekunden benötigen, um zu reagieren, die Aktion jedoch gespeichert haben. &lt;/p&gt;
&lt;p&gt;Szenario: Pin eingegeben; Bankomat fragt: &lt;code&gt;Was möchten Sie tun?&lt;/code&gt;; ich drücke auf das Bildschirmfeld mit der Beschrifung &lt;code&gt;Schweizer Franken abheben&lt;/code&gt;; nicht geschieht - naja, dann ist das hier halt kein Touchscreen, kann ja sein. Ich drücke den dazugehörigen Knopf bei der Taste; &lt;em&gt;Beeeeeeeep&lt;/em&gt;; Bankomat: &lt;code&gt;Möchten Sie eine Quittung?&lt;/code&gt;; Aaaaaah! Und auch hier ist der &lt;code&gt;Abbrechen&lt;/code&gt;-Knopf natürlich nicht mehr im Betrieb und bei besonders viel Glück kommt besonders viel Geld aus dem Bankomaten. Es ist ja auch tierisch schwer eine Toucheingabe in unter fünf Sekunden zu verarbeiten.&lt;/p&gt;
&lt;p&gt;Man könnte meinen Geldautomaten sind Idiotensicher - denkste weiter. m( &lt;/p&gt;</summary><category term="bankomat"></category><category term="fail"></category><category term="geld"></category><category term="bank"></category><category term="random"></category><category term="automat"></category><category term="leben"></category></entry><entry><title>Mediagoblin auf einem Uberspace</title><link href="http://aurka.com/mediagoblin-auf-uberspace.html" rel="alternate"></link><updated>2013-11-19T00:00:00+01:00</updated><author><name>janssen</name></author><id>tag:aurka.com,2013-11-19:mediagoblin-auf-uberspace.html</id><summary type="html">&lt;p&gt;&lt;img alt="Mediagoblin" src="http://www.aurka.com/pictures/mediagoblin_header.png" /&gt;&lt;/p&gt;
&lt;p&gt;Bei den &lt;a href="https://uberspace.de" title="Uberspace.de"&gt;Ubernauten&lt;/a&gt; lässt sich &lt;a href="http://www.mediagoblin.org/" title="Mediagoblin.org"&gt;Mediagoblin&lt;/a&gt; installieren - auch wenn es doch ziemlich viel gebastel ist. Ich hoffe ich kann jemandem mit dieser Anleitung ein paar Minuten/Stunden Arbeit ersparen.&lt;/p&gt;
&lt;h1&gt;Über Mediagoblin&lt;/h1&gt;
&lt;p&gt;Mediagoblin ist ein in Python geschrieben und ein unter AGPL stehendes Replacement für Fotoplattformen wie flickr oder 500px und/oder für Musikplattforen wie Soundcloud. Es kann gar 3D-Dokument darstellen oder Filme abspielen. Kurz: Ein kleines Mediacenter.&lt;/p&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;h2&gt;Vorbereitungen&lt;/h2&gt;
&lt;p&gt;Diese Anleitung verwendet Postgres als Datenbank für Mediagoblin. Defaultmässig wird auf Sqlite zurückgegriffen - wenn ihr ohne Postgres auskommen wollt, dann vergesst diesen Punkt.&lt;/p&gt;
&lt;p&gt;Wir müssen also zuerst postgres für den Uberspace konfigurieren. Hierfür muss nur ein Script angekickt werden:
    uberspace-setup-postgresql&lt;/p&gt;
&lt;p&gt;User erstellen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;createuser&lt;/span&gt; &lt;span class="n"&gt;mediagoblin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Datenbank erstellen (mit dem Owner des soeben erstellen Users ’mediagoblin’:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;createdb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="n"&gt;UNICODE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="n"&gt;mediagoblin&lt;/span&gt; &lt;span class="n"&gt;mediagoblin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nun müsst ihr euch überlegen, wie ihr auf euer Mediagoblin zugreiffen wollt. Ich mache dies via Subdomain mediagoblin.aurka.com.
Also muss unter &lt;code&gt;/var/www/virtual/&amp;lt;Uberspace Account&amp;gt;/&lt;/code&gt; ein Directory mit dem Namen &lt;code&gt;mediagoblin.aurka.com&lt;/code&gt; erstellt werden.
Da Mediagoblin wie &lt;code&gt;git&lt;/code&gt; gepullt wird, lasse ich gerade &lt;code&gt;git&lt;/code&gt; den Ordner erstellen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Uberspace&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//gitorious.org/mediagoblin/mediagoblin.git mediagoblin.aurka.com&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;mediagoblin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aurka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;submodule&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;submodule&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Das &lt;code&gt;git&lt;/code&gt;-Repository ist momentan auf dem master-branch. Mit diesem habe ich nie eine laufende Version hingekriegt. Allgemein macht es Sinn, auf den aktuellesten Tag zu wechseln - mit diesem dürfte Mediagoblin am stabilsten laufen. In meinem Falle ist dies Tag v0.5.1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.5.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nun wird mit &lt;code&gt;virtualenv&lt;/code&gt; eine virtuelle Python Umgebung erstellt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Diese virtuelle Umgebung muss nun aktiviert werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Jetzt verfügen wir über eine eigene virtuelle Python-Umgebung, fügen wir nun also die benötigten Pys hinzu. Ich verwende hierzu &lt;code&gt;pip&lt;/code&gt;, natürlich kann auch &lt;code&gt;easy_install&lt;/code&gt; verwendet werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;psycopg2&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;paste&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flup&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;sqlalchemy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mediagoblin benötigt zusätzlich die Python Image Library (PIL). Dort gibt es jedoch etwas handarbeit, deshalb wird es nicht via Paketmanager installiert:
Aktuellste PIL Version von der &lt;a href="http://www.pythonware.com/products/pil/" title="PIL Homepage"&gt;PIL-Homepage&lt;/a&gt; herunterladen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;PIL&lt;/span&gt;
&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//effbot.org/downloads/Imaging-1.1.7.tar.gz&lt;/span&gt;
&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;xvfz&lt;/span&gt; &lt;span class="n"&gt;Imaging&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.1.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;Imaging&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.1.7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PIL sollte die JPG, TIFF, etc. Libraries eigentlich automatisch finden - tut es aber nicht. In der setup.py können wir dies nun aber ändern:
&lt;code&gt;vim setup.py&lt;/code&gt; -&amp;gt; Die Nummern sind die Zeilennummern, damit ihr nicht lange suchen müsst ;-)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;36&lt;/span&gt; &lt;span class="n"&gt;TCL_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib64&amp;quot;&lt;/span&gt; 
&lt;span class="mi"&gt;37&lt;/span&gt; &lt;span class="n"&gt;JPEG_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib64&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;38&lt;/span&gt; &lt;span class="n"&gt;ZLIB_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib64&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;39&lt;/span&gt; &lt;span class="n"&gt;TIFF_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib64&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="n"&gt;FREETYPE_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib64&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="n"&gt;LCMS_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/lib64&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Der Vollständigkeitshalber wieder ins virtualevn-root wechseln &lt;code&gt;cd ../..&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Nun kann PIL installiert werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;../../bin/python setup.py install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Jetzt sind alle Pys, welche Mediagoblin nicht automatisch mitinstalliert (wieso auch immer) auf dem System. Nun kann der ganze Rest automatisch gezogen werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;develop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dies sollte ohne Fehler ablaufen. Ansonsten müsst ihr evt. noch weiter Pys installieren.&lt;/p&gt;
&lt;p&gt;mediagoblin.ini muss nun noch angepasst werden. Die Verwendung von Postgres ist bereits vorbereitet - es muss nur diese Line entkommentiert werden.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sql_engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postgresql&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;///mediagoblin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nun kann die Datenbank initialisiert werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gmg&lt;/span&gt; &lt;span class="n"&gt;dbupdate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mediagoblin kann nun über den von den Ubernauten für euch freigegeben Port erreichbar gemacht werden. Zuerst muss der Port jedoch noch in der Datei &lt;code&gt;paste.ini&lt;/code&gt; editiert werden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[server:broadcast]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Paste#http&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;insert-your-port-here&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mediagoblin deployen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lazyserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;broadcast&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ihr könnt nun euer Mediagoblin unter http://&lt;dein-uberspace&gt;:&lt;dein-port&gt; ansteuern und verwenden.&lt;/p&gt;
&lt;h2&gt;FastCGI deployment&lt;/h2&gt;
&lt;p&gt;Soweit so gut, wir wollen aber via Port 80 und/oder Port 443 auf Mediagoblin zugreiffen. Also muss ein FastCGI deployment her.&lt;/p&gt;
&lt;p&gt;Erstellt under &lt;code&gt;mediagoblin&lt;/code&gt; die Datei &lt;code&gt;mg.fcgi&lt;/code&gt; (Achtung: Die Pfäde zu Python und paste.ini korrigieren!):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Written&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;2011&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;Christopher&lt;/span&gt; &lt;span class="nx"&gt;Allan&lt;/span&gt; &lt;span class="nx"&gt;Webber&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;extent&lt;/span&gt; &lt;span class="nx"&gt;possible&lt;/span&gt; &lt;span class="nx"&gt;under&lt;/span&gt; &lt;span class="nx"&gt;law&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;dedicated&lt;/span&gt; &lt;span class="kc"&gt;all&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;copyright&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;related&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;neighboring&lt;/span&gt; &lt;span class="nx"&gt;rights&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;software&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;domain&lt;/span&gt; &lt;span class="nx"&gt;worldwide.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;software&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;distributed&lt;/span&gt; &lt;span class="nx"&gt;without&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;warranty.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; 
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;received&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;CC0&lt;/span&gt; &lt;span class="k"&gt;Public&lt;/span&gt; &lt;span class="nf"&gt;Domain&lt;/span&gt; &lt;span class="nx"&gt;Dedication&lt;/span&gt; &lt;span class="nx"&gt;along&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;software.&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;see&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//creativecommons.org/publicdomain/zero/1.0/&amp;gt;.&lt;/span&gt;

&lt;span class="nb"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;paste.deploy&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;loadapp&lt;/span&gt;
&lt;span class="nb"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;flup.server.fcgi&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;WSGIServer&lt;/span&gt;

&lt;span class="n"&gt;CONFIG_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;/path/to/mediagoblin/paste.ini&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;&lt;/span&gt;

&lt;span class="s1"&gt;import os&lt;/span&gt;
&lt;span class="s1"&gt;os.environ[&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;CELERY_ALWAYS_EAGER&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;] = &lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;&lt;/span&gt;

&lt;span class="s1"&gt;def launch_fcgi():&lt;/span&gt;
&lt;span class="s1"&gt;    ccengine_wsgi_app = loadapp(&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;config:&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt; + CONFIG_PATH)&lt;/span&gt;
&lt;span class="s1"&gt;    WSGIServer(ccengine_wsgi_app).run()&lt;/span&gt;


&lt;span class="s1"&gt;if __name__ == &lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;__main__&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;
&lt;span class="s1"&gt;    launch_fcgi()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Das Script nun ausführbar machen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;mediagoblin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fcgi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Und eine &lt;code&gt;.htaccess&lt;/code&gt;-Datei erstellen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;RewriteEngine&lt;/span&gt; &lt;span class="n"&gt;On&lt;/span&gt;
&lt;span class="n"&gt;RewriteBase&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;RewriteCond&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;REQUEST_FILENAME&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;!-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="n"&gt;RewriteRule&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mediagoblin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fcgi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;QSA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;Options&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ExecCGI&lt;/span&gt;
&lt;span class="n"&gt;AddHandler&lt;/span&gt; &lt;span class="n"&gt;fcgid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fcgi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Das FastCGI-Depoyment ist nun bereits fertig!&lt;/p&gt;
&lt;h2&gt;Service erstellen&lt;/h2&gt;
&lt;p&gt;Wie üblich bei den Ubernauten wird nun noch ein Service erstellt.&lt;/p&gt;
&lt;p&gt;Die Postgresinstallation hat &lt;code&gt;~/service&lt;/code&gt; bereits erstellt - dies ist also bereits gemacht.&lt;/p&gt;
&lt;p&gt;Bei mir sieht dann &lt;code&gt;~/etc/run-mediagoblin/run&lt;/code&gt; folgendermassen aus:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /var/www/virtual/keks/mediagoblin.aurka.com/
&lt;span class="nb"&gt;source &lt;/span&gt;bin/activate
./lazyserver.sh --server-name&lt;span class="o"&gt;=&lt;/span&gt;fcgi &lt;span class="nv"&gt;fcgi_host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;127.0.0.1 &lt;span class="nv"&gt;fcgi_port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;Uberspace-Port-von-mir&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Nun muss einzig noch nach &lt;code&gt;~/service&lt;/code&gt; gelinkt werden:
    ln -s ~/etc/run-mediagoblin/ ~/service/mediagoblin&lt;/p&gt;
&lt;p&gt;Mediagoblin läuft nun als Service. Viel Spaß beim verwenden!&lt;/p&gt;
&lt;p&gt;Wenn ihr zuerst ein Mediagoblin anschauen wollt. Hier ist mein &lt;a href="http://mediagoblin.aurka.com" title="mediagoblin.aurka.com"&gt;Mediagoblin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Korrekturen, Bugfixes, etc. bitte an mich herantragen, damit ich die Doku verbessern/korrigieren kann.&lt;/p&gt;
&lt;h1&gt;Useful links&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.linux-magazine.com/Online/Features/MediaGoblin" title="Linux Magazin"&gt;Linux Magazin mit einer Mediagoblin Installations-Anleitung&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mediagoblin.readthedocs.org/en/v0.5.1/siteadmin/deploying.html" title="Mediagoblin Wiki"&gt;Offizielles Mediagoblin Wiki&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Dankeschön&lt;/h1&gt;
&lt;p&gt;An Christopher von der Ubernauten fürs weiterhelfen beim FastCGI deployment!&lt;/p&gt;</summary><category term="mediagoblin"></category><category term="uberspace"></category><category term="install"></category><category term="deploy"></category><category term="howto"></category><category term="tech"></category><category term="python"></category><category term="pypi"></category><category term="pip"></category><category term="easy_install"></category><category term="photo"></category><category term="pictures"></category></entry><entry><title>Online / Hello World</title><link href="http://aurka.com/online-hello-world.html" rel="alternate"></link><updated>2013-11-13T00:00:00+01:00</updated><author><name>janssen</name></author><id>tag:aurka.com,2013-11-13:online-hello-world.html</id><summary type="html">&lt;p&gt;&lt;img alt="woot" src="pictures/header_1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Die Seite ist Online!&lt;/p&gt;
&lt;p&gt;Fazit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Design: Mehr oder weniger default-Pelican-Theme =&amp;gt; boring&lt;/li&gt;
&lt;li&gt;Inhalt: Eigentlich noch nichts =&amp;gt; boring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More to come.&lt;/p&gt;</summary><category term="pelican"></category><category term="start"></category><category term="blog"></category><category term="uberspace"></category><category term="ubernauten"></category><category term="blogging"></category></entry></feed>